#!/usr/bin/python

#
#   Copyright 2016 Purdue University
#   
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#   
#       http://www.apache.org/licenses/LICENSE-2.0
#   
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#
#
#   Filename:     config_core.py
#
#   Created by:   Jacob R. Stevens
#   Email:        steven69@purdue.edu
#   Date Created: 02/14/2017
#   Description:  Configures a RISCV core based on the given YAML config file
import yaml
import argparse 
import sys

VH_FILE = 'source_code/include/component_selection_defines.vh'
ISA_PARAMS = \
  {
    'xlen' : [32]
  }

UARCH_PARAMS = \
  {
    # Branch/Jump Configurations
    'br_predictor_type' : ['not_taken'],
    # Cache Configurations
    'cache_config' : ['separate'],
    'dcache_type' : ['pass_through'],
    'icache_type' : ['pass_through'],
    # Bus Configurations
    'bus_endianness' : ['big', 'little'],
    'bus_interface_type' : ['ahb_if', 'generic_bus_if']
  }

RISC_MGMT_PARAMS = \
  {
    # Valid standard extensions
    'standard_extensions' : ['rv32m'],
    # Valid nonstandard extensions
    'nonstandard_extensions' : ['template']
  }

NONSTANDARD_OPCODES = ["7'b000_1011", "7'b010_1011", "7'b101_1011", "7'b111_1011"]

# Returns an object containing the parsed configuration file.
# Currently uses PyYAML and YAML format
def load_configuration(file_name):
  with open(file_name, 'r') as f:
    try:
      config = yaml.load(f)
    except yaml.parser.ParserError:
      sys.exit('Parse of '+ file_name + ' failed. Please check yml syntax')
  return config

# Creates the include file from the config object
def create_include(config):
  include_file = open(VH_FILE, 'w')
  # Write include header to file
  header = '/*\nWARNING: THIS FILE WAS AUTOMATICALLY GENERATED BY\n'
  header += 'CONFIG_CORE. DO NOT MAKE CHANGES TO THIS FILE. ANY CHANGES\n'
  header += 'MAY BE OVERWRITTEN. DO NOT VERSION CONTROL THIS FILE.\n*/\n'
  header += '`ifndef COMPONENT_SELECTION_DEFINES_VH\n'
  header += '`define COMPONENT_SELECTION_DEFINES_VH\n\n\n'
  include_file.write(header)
  

  # Handle localparam configurations
  isa_params = config['isa_params']
  include_file.write('// ISA Params:\n') 
  for isa_param in isa_params:
    try:
      if isa_params[isa_param] not in ISA_PARAMS[isa_param]:
        err = 'Illegal configuration. ' + isa_params[isa_param]
        err += ' is not a valid configuration for ' + isa_param
        sys.exit(err)
      else:
        line = 'localparam '
        # xlen will be an integer in include file, so no quotes needed
        if 'xlen' == isa_param:
          line += isa_param.upper() + ' = ' + str(isa_params[isa_param])
        else:
          line += isa_param.upper() + ' = "' + isa_params[isa_param] + '"'
        line += ';\n'
      include_file.write(line)
    except TypeError:
      sys.exit('Type Error. Please check to make sure .yml file is correct.')
  include_file.write('\n// Microarch Params:\n') 
  uarch_params = config['microarch_params']
  for uarch_param in uarch_params:
    if uarch_params[uarch_param] not in UARCH_PARAMS[uarch_param]:
      err = 'Illegal configuration. ' + uarch_params[uarch_param]
      err += ' is not a valid configuration for ' + uarch_param
      sys.exit(err)
    else:
      line = 'localparam '
      line += uarch_param.upper() + ' = "' + uarch_params[uarch_param] + '"'
      line += ';\n'
    include_file.write(line)

  # Handle bus interface define
  bus_type = uarch_params['bus_interface_type'].split('_if')[0]
  bus_define = '`define BUS_INTERFACE_' + bus_type.upper() + '\n'
  include_file.write(bus_define)

  # Handling of RISC-MGMT Extensions
  rmgmt_extensions = []
  try:
    rmgmt_params = config['risc_mgmt_params']
    for rmgmt_param in rmgmt_params:
      extensions = rmgmt_params[rmgmt_param].split(' ')
      extensions = [s.strip('-') for s in extensions]
      for extension in extensions:
        if extension not in RISC_MGMT_PARAMS[rmgmt_param]:
          err = 'Unsupported extension: ' + extension
          sys.exit(err)
        else:
          rmgmt_extensions.append([extension, rmgmt_param])
  except:
    err = "Error Parsing RISC-MGMT extension configuration."
    sys.exit(err) 

  # Need to at least have the nop extension
  if(len(rmgmt_extensions) == 0):
    rmgmt_extensions.append(['template', 'nonstandard_extension'])
  include_file.write('\n// RISC-MGMT Extensions:\n') 
  include_file.write('`define NUM_EXTENSIONS ' + str(len(rmgmt_extensions)) + '\n')
  include_file.write('`define RISC_MGMT_EXTENSIONS\t\\\n')
  ext_num = 0
  nonstandard_num = 0
  for extension in rmgmt_extensions:
    if(extension[1] == 'standard_extensions'):
      include_file.write('\t`ADD_EXTENSION('+extension[0]+','+str(ext_num)+")")
    elif (nonstandard_num < len(NONSTANDARD_OPCODES)):
      include_file.write('\t`ADD_EXTENSION_WITH_OPCODE('+extension[0]+','+
        str(ext_num)+','+NONSTANDARD_OPCODES[nonstandard_num]+")")
      nonstandard_num = nonstandard_num + 1
    ext_num = ext_num + 1
    if(ext_num != len(rmgmt_extensions)):
      include_file.write('\t\\\n')
    else:
      include_file.write('\n')

  # Write include footer to file
  footer = '\n`endif // COMPONENT_SELECTION_DEFINES_VH\n'
  include_file.write(footer)
  include_file.close()
  


if __name__ == '__main__':
  description = 'Configure a processor. This script takes a .yml'
  description += ' configuration file as input and creates the file '
  description += 'component_selection_defines.vh in source_code/include.'
  description += 'Caution: if this file already exists, it is overwritten.'
  parser = argparse.ArgumentParser(description=description)
  parser.add_argument('file_name', metavar='file_name', type=str,
                      help='The config file name')
  args = parser.parse_args()

  #TODO: Check for .yaml/.yml
  config = load_configuration(args.file_name)
  create_include(config)
